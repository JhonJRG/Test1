原则：
1.pull远程对应本地，push本地对应远程。
2.pull时，要区分主支和分支，push时也要区分主支和分支；pull与push时本地分支都要有相应的远程跟踪分支。
3.先pull，后push；先pull远程主支，后pull远程分支。先push本地分支，后push本地主支（本地分支和远程分支都是各管各的互不干扰）

此处着重描述两种关系：
远程分支<——>本地分支
远程跟踪分支<——>本地分支

一
本地分支：

查看本地分支
git branch -a (星号当前本地分支、绿色及灰色为本地分支、红色为远程分支)

删除本地分支
git branch -d dev

新建本地分支
git branch dev

切换本地分支
git checkout dev

查看远程分支
git remote -v

二
远程跟踪分支：[和本地分支一起执行pull/push语句，如同本地分支与远程分支之间的中介。例如origin（远程跟踪分支）与master（本地分支）]

查看远程跟踪分支
git remote -v

新增远程跟踪分支
git remote add dev_remote git@github.com:JhonJRG/git@github.com:JhonJRG/github.git

更改远程跟踪分支名字
git remote rename dev_remote dev_new_remote

更改远程跟踪分支地址
git remote set-url dev_new_remote git@abc.com/abc.git

删除远程跟踪分支
git remote remove dev_remote

三
（本地）分支的upstream：（是本地分支和远程分支相互映射，建立联系，否则无法pull/push）

查看本地分支与远程分支的映射关系（即git branch -a里的绿色分支灰色分支与红色分支之间的映射）
git branch -vv

本地分支与远程分支建立映射
git branch -u origin/dev dev（不切换本地分支直接设置其他本地分支的upstream）
git branch -u origin/dev（此命令的含义是，是指当前分支的upstream为origin远程仓库的dev分支。需切换本地分支）
git branch --set-upstream to=origin/dev（与上一句含义一致，也同需切换本地分支） 

取消upstream
git branch --unset-upstream（取消当前分支的upstream）
git branch --unset-upstream [分支名]（取消其他分支的upstream）

查看upstream
cat .git/config（查看upstream信息，主要是查看仓库目录下.git/config文件）
git remote show（也可以通过这条语句查看）

在推送的同时，同时设置upstream（暂时不理解，真的不要用，这条也不很需要）
git push -u origin master

三
远程分支与分支本地（先pull，后push）

在本地分支master中pull远程跟踪分支origin
git pull origin master

切换本地分支
git checkout dev

新建文件（本地做改变之后再去push才管用，增删更直观）
touch dev_test.md

提交步骤

git add .

git commit -am "Update info"

git push dev_remote dev


切换本地分支master
git checkout master

合并分支（合并意即将本地dev的内容全部合并到master里，两个本地分支相同的部分一定要一致，否则会冲突。一般在dev里新增文件再merge到master里）
git merge dev（在master里执行此句）

撤销合并（安全撤销）
git merge --abort

撤销合并（意思是努力重置？额）
git reset --hard

提交步骤
git add .

git commit -am "Update info"

git push origin master
