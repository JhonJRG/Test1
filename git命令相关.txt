原则：
1.pull远程对应本地，push本地对应远程。
2.pull时，要区分主支和分支，push时也要区分主支和分支。
3.先pull，后push；先pull远程主支，后pull远程分支。先push本地分支，后push本地主支（本地开发分支和本地主分支相互独立，各有不同。远程开发分支与远程主分支相互独立，各有不同）


git clone远程仓库的分支（重要）：
git checkout -b dev origin/dev
上面的语句作用是在本地创建新的分支，分支的名称是dev，dev也是我想要clone的分支的名字，这里为了便于理解将本地的分支名字和clone的分支名字设为一样，其实-b后面的dev可以随意设置。 
执行完上述语句后，会发现你想clone的code已经在你的本地老老实实的待着了。 
如果后来这个分支的作者又有了更新，你可以使用如下命令获取最新的分支内容：git pull origin dev

一
本地分支：

查看本地分支
git branch -a (星号当前本地分支、绿色及灰色为本地分支、红色为远程分支)

remotes/origin/master:origin表示远程主机，master表示远程主机的master分支
remotes/origin/dev:表示远程主机origin的dev分支

查看当前本地分支
git branch

删除本地开发分支
git branch -d dev

新建本地开发分支
git branch dev

切换本地开发分支
git checkout dev

二
远程分支：

查看远程分支
git remote -v（同git remote --verbose[verbose的意思是冗长的，意思是显示全称]）

查看已经存在的远程分支
git remote

新增远程分支
git remote add dev_remote git@github.com:JhonJRG/git@github.com:JhonJRG/github.git

更改远程分支名字
git remote rename dev_old dev_new_remote

更改远程分支地址
git remote set-url dev_new_remote git@abc.com/abc.git

删除远程分支
git remote remove dev_new_remote

三
（本地）分支的upstream：（是本地分支和远程分支相互映射，建立联系，否则无法准确pull/push）

查看本地分支与远程分支的映射关系（即git branch -a里的绿色分支灰色分支与红色分支之间的映射）
git branch -vv

本地分支与远程分支建立映射（必须执行此步，不然你思路肯定是混乱的）
git branch -u origin/dev dev（不切换本地分支直接设置其他本地分支的upstream）
git branch -u origin/dev（此命令的含义是，是指当前分支的upstream为origin远程仓库的dev分支。需切换本地分支）
git branch --set-upstream to=origin/dev（与上一句含义一致，也同需切换本地分支） 

取消upstream
git branch --unset-upstream（取消当前分支的upstream）
git branch --unset-upstream [分支名]（取消其他分支的upstream）

查看upstream
cat .git/config（查看upstream信息，主要是查看仓库目录下.git/config文件）
git remote show（也可以通过这条语句查看）

在推送的同时，同时设置upstream
（下面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了）
git push -u origin master

不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。
Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。
$ git config --global push.default matching
# 或者
$ git config --global push.default simple

还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用–all选项。
$ git push --all origin
Shell
上面命令表示，将所有本地分支都推送到origin主机。



三
远程分支与分支本地（先pull，后push）

git pull命令用于从另一个存储库或本地分支获取并集成(整合)。git pull命令的作用是：取回远程主机某个分支的更新，再与本地的
指定分支合并，它的完整格式稍稍有点复杂
使用语法
git pull [options] [<repository> [<refspec>…]]

描述
将远程存储库中的更改合并到当前分支中。在默认模式下，git pull是git fetch后跟git merge FETCH_HEAD的缩写。

更准确地说，git pull使用给定的参数运行git fetch，并调用git merge将检索到的分支头合并到当前分支中。 
使用--rebase，它运行git rebase而不是git merge

示例
以下是一些示例 -

$ git pull <远程主机名> <远程分支名>:<本地分支名>
Shell

比如，要取回origin主机的next分支，与本地的master分支合并，需要写成下面这样
$ git pull origin next:master
Shell

如果远程分支(next)要与当前分支合并，则冒号后面的部分可以省略。上面命令可以简写为：
$ git pull origin next
Shell

上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再执行git merge。
$ git fetch origin
$ git merge origin/next
Shell

在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。比如，在git clone的时候，所有本地分支
默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。

Git也允许手动建立追踪关系。
$ git branch --set-upstream master origin/next
Shell
上面命令指定master分支追踪origin/next分支。

如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。
$ git pull origin
Shell
上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”(remote-tracking branch)进行合并。

如果当前分支只有一个追踪分支，连远程主机名都可以省略。
$ git pull
Shell
上面命令表示，当前分支自动与唯一一个追踪分支进行合并。


——————————————————————————————————————————————————————————————————————————————————————————
如果合并需要采用rebase模式，可以使用–rebase选项。
$ git pull --rebase <远程主机名> <远程分支名>:<本地分支名>
Shell

git fetch和git pull的区别

git fetch：相当于是从远程获取最新版本到本地，不会自动合并。
$ git fetch origin master
$ git log -p master..origin/master
$ git merge origin/master
Shell
以上命令的含义：

首先从远程的origin的master主分支下载最新的版本到origin/master分支上
然后比较本地的master分支和origin/master分支的差别
最后进行合并
上述过程其实可以用以下更清晰的方式来进行：

$ git fetch origin master:tmp
$ git diff tmp
$ git merge tmp
Shell
2. git pull：相当于是从远程获取最新版本并merge到本地

git pull origin master
Shell
上述命令其实相当于git fetch 和 git merge
在实际使用中，git fetch更安全一些，因为在merge前，我们可以查看更新情况，然后再决定是否合并。
——————————————————————————————————————————————————————————————————————————————————————————










________________________________________________________________________________________________________

git pull origin master:master

切换本地开发分支dev
git checkout dev

新建文件（本地做改变之后再去push才管用，增删更直观）
touch dev_test.md

本地开发分支push远程开发分支：

git add . （添加到暂存区）

git commit -am "Update info" （添加到本地库）

git push dev_remote dev （添加到远程开发分支）


切换本地主分支master
git checkout master

合并分支（本地开发分支dev里的内容相当于草稿，本地主分支里的内容相当于成品。merge是将本地开发分支成品的文件【可以是增删】添加到本地主分支里，再push到远程分支上）
git merge dev（在master里执行此句）

撤销合并（安全撤销）
git merge --abort

撤销合并（意思是努力重置？额）
git reset --hard

本地主分支push到远程主分支:

git add . （添加到暂存区）

git commit -am "Update info" （添加到本地库）

git push origin master （添加到远程主分支）

git status （查看状态）

git status -s （查看状态更多）
